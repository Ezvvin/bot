package telegrambot

import (
	"bot/internal/domain"
	commandimpl "bot/internal/telegram_bot/command_impl"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	log "github.com/sirupsen/logrus"
)

func (bot *Telegrambot) InitHandler(cfg domain.Config) {
	log.Debug("Init bot handler")
	updates := bot.Bot.GetUpdatesChan(bot.UpdateCfg)
	// –°–æ–∑–¥–∞–µ–º –º–∞–ø—É –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ª–æ–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	userMap := map[int64]domain.Location{}
	// flag := false
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
	for update := range updates {
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –ø—É—Å—Ç–æ–µ
		if update.Message == nil {
			continue
		}

		if update.Message.Contact != nil {
			log.Debug("sos", update.Message.Contact)
			continue
		}
		if userMap[update.Message.From.ID] == domain.Location_Support {
			copymessage := tgbotapi.NewCopyMessage(cfg.AdminChat, update.Message.Chat.ID, update.Message.MessageID)
			if _, err := bot.Bot.Send(copymessage); err != nil {
				log.WithError(err).Errorf(domain.ErrCommand_Init.Error(), "copymessage")
			}
			userMap[update.Message.From.ID] = domain.Location_MainMenu
			continue
		}

		switch update.Message.Text {
		// TODO: –°–≥—Ä—É–ø–ø–∏—Ä—É–π –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º(–º–æ–∂–Ω–æ –ø–æ –ª–æ–∫–∞—Ü–∏–∏ –Ω–∞–ø—Ä–∏–º–µ—Ä –∏ –∫–∞–∫-—Ç–æ –µ—â–µ, –ø–æ–¥—É–º–∞–π), –∏–Ω–∞—á–µ —á–µ—Ä–µ–∑ 10 –∫–æ–º–º–∞–Ω–¥ —å—É—å —é–µ–¥—Ç –Ω–µ—Ä–∞–∑–±–µ—Ä–∏—Ö–∞...
		case "/start":
			commandimpl.Start(userMap, bot.Bot, update)

		case "–ö–∞—Ç–∞–ª–æ–≥ –æ–¥–µ–∂–¥—ãü•º":
			commandimpl.Catalog(userMap, bot.Bot, update)

		case "üñ§Black Hoodieüñ§":
			commandimpl.BlackHoodieCommand(userMap, bot.Bot, update)

		case "ü§çWhite Hoodieü§ç":
			commandimpl.WhiteHoodieCommand(userMap, bot.Bot, update)

		case "–í—ã–±—Ä–∞—Ç—å —Ä–∞–∑–º–µ—Äüìè":
			commandimpl.InfoHoodie(userMap, bot.Bot, update)

		case "S-46 (EUR)", "M-48 (EUR)", "L-50 (EUR)":
			commandimpl.SizeHoodie(userMap, bot.Bot, update)

		case "–°–∞–º–æ–≤—ã–≤–æ–∑":
			commandimpl.DeliveryPoint(userMap, bot.Bot, update)

		case "–î–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –∞–¥—Ä–µ—Å—É":
			commandimpl.DeliveryCourier(userMap, bot.Bot, update)

		case "–û—Ç–∑—ã–≤—ãüî•":
			commandimpl.Commends(userMap, bot.Bot, update)

		case "–ü–æ–¥–¥–µ—Ä–∂–∫–∞":
			commandimpl.Support(userMap, bot.Bot, update)

		case "–ú–∞–≥–∞–∑–∏–Ω L√öQ":
			commandimpl.Contacts(bot.Bot, update)

		case "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑":
			commandimpl.AcceptDelivery(userMap, bot.Bot, update)

		case "–û–ø–ª–∞—Ç–∏—Ç—å –∑–∞–∫–∞–∑":
			commandimpl.PayHoodie(userMap, bot.Bot, update)

		case "‚óÄÔ∏è–ù–∞–∑–∞–¥":
			commandimpl.Back(userMap, bot.Bot, update)

		case "phone_number":
			commandimpl.Catalog(userMap, bot.Bot, update)

		default:
			// –û–°–¢–û–†–û–ñ–ù–û –ö–û–°–¢–´–õ–¨
			// if flag {
			// 	copymessage := tgbotapi.NewCopyMessage(430337954, update.Message.Chat.ID, update.Message.MessageID)
			// 	if _, err := bot.Bot.Send(copymessage); err != nil {
			// 		log.WithError(err).Errorf(domain.ErrCommand_Init.Error(), "copymessage")
			// 	}
			// 	continue
			// }
			commandimpl.Undefined(userMap, bot.Bot, update)
		}

	}
}
