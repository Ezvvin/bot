package telegrambot

import (
	db_usecase "bot/internal/database/usecase"
	"bot/internal/domain"
	commandimpl "bot/internal/telegram_bot/command_impl"
	"fmt"
	"strconv"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	log "github.com/sirupsen/logrus"
)

func (bot *Telegrambot) InitHandler(cfg domain.Config, dbu *db_usecase.DataBaseUsecase) {
	log.Debug("Init bot handler")
	updates := bot.Bot.GetUpdatesChan(bot.UpdateCfg)
	// –°–æ–∑–¥–∞–µ–º –º–∞–ø—É –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ª–æ–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	userMap := map[int64]domain.Location{}
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
	for update := range updates {
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –ø—É—Å—Ç–æ–µ
		if update.Message == nil {
			continue
		}
		// –ø—Ä–æ–≤–µ—Ä—è–µ–º , –∏–º–µ–µ—Ç –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç –∫–æ–Ω—Ç–∞–∫—Ç–∞
		if update.Message.Contact != nil {
			log.Debug("sos", update.Message.Contact)
			continue
		}
		if userMap[update.Message.From.ID] == domain.Location_Support {
			msgSupport := tgbotapi.NewMessage(cfg.AdminChat, fmt.Sprintf(strconv.FormatInt(update.Message.From.ID, 10), "–ö–ª–∏–µ–Ω—Ç", update.FromChat().UserName, "–∂–¥–µ—Ç –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å:", update.Message.Text))
			if _, err := bot.Bot.Send(msgSupport); err != nil {
				log.WithError(err).Errorf(domain.ErrCommand_Init.Error(), "groupmessage")
			}
			userMap[update.Message.From.ID] = domain.Location_MainMenu
			continue
		}
		// TODO —Å–¥–µ–ª–∞—Ç —å–∫–Ω–æ–ø–∫—É –Ω–∞–∑–∞–¥ \ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é

		switch userMap[update.Message.From.ID] {
		case domain.Location_MainMenu:
			switch update.Message.Text {
			case "–ö–∞—Ç–∞–ª–æ–≥ –æ–¥–µ–∂–¥—ãü•º":
				commandimpl.Catalog(userMap, bot.Bot, update)

			case "–û—Ç–∑—ã–≤—ãüî•":
				commandimpl.Commends(userMap, bot.Bot, update)

			case "–ü–æ–¥–¥–µ—Ä–∂–∫–∞":
				commandimpl.Support(userMap, bot.Bot, update)

			case "–ú–∞–≥–∞–∑–∏–Ω L√öQ":
				commandimpl.Contacts(bot.Bot, update)
			default:
				commandimpl.Undefined(userMap, bot.Bot, update)

			}
		case domain.Location_HoodyCatalogMenu:
			switch update.Message.Text {
			case "üñ§Black Hoodieüñ§":
				commandimpl.BlackHoodieCommand(userMap, bot.Bot, update)

			case "ü§çWhite Hoodieü§ç":
				commandimpl.WhiteHoodieCommand(userMap, bot.Bot, update)
			case "‚óÄÔ∏è–ù–∞–∑–∞–¥":
				commandimpl.Back(userMap, bot.Bot, update)
			default:
				commandimpl.Undefined(userMap, bot.Bot, update)
			}
		case domain.Location_HoodyColorMenu:
			switch update.Message.Text {
			case "–í—ã–±—Ä–∞—Ç—å —Ä–∞–∑–º–µ—Äüìè":
				commandimpl.InfoHoodie(userMap, bot.Bot, update)
			case "‚óÄÔ∏è–ù–∞–∑–∞–¥":
				commandimpl.Back(userMap, bot.Bot, update)
			default:
				commandimpl.Undefined(userMap, bot.Bot, update)
			}
		case domain.Location_SizeHoodie:
			switch update.Message.Text {
			case "S-46 (EUR)", "M-48 (EUR)", "L-50 (EUR)":
				commandimpl.SizeHoodie(userMap, bot.Bot, update)
			case "‚óÄÔ∏è–ù–∞–∑–∞–¥":
				commandimpl.Back(userMap, bot.Bot, update)
			default:
				commandimpl.Undefined(userMap, bot.Bot, update)
			}
		case domain.Location_Delivery:
			switch update.Message.Text {
			case "–°–∞–º–æ–≤—ã–≤–æ–∑":
				commandimpl.DeliveryPoint(userMap, bot.Bot, update)

			case "–î–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –∞–¥—Ä–µ—Å—É":
				commandimpl.DeliveryCourier(userMap, bot.Bot, update)
			case "‚óÄÔ∏è–ù–∞–∑–∞–¥":
				commandimpl.Back(userMap, bot.Bot, update)
			default:
				commandimpl.Undefined(userMap, bot.Bot, update)
			}
		case domain.Location_DeliveryCourier:
			switch update.Message.Text {
			case "‚óÄÔ∏è–ù–∞–∑–∞–¥":
				commandimpl.Back(userMap, bot.Bot, update)
			default:
				commandimpl.Undefined(userMap, bot.Bot, update)
			}
		case domain.Location_DeliveryPoint:
			switch update.Message.Text {
			case "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑":
				commandimpl.AcceptDelivery(userMap, bot.Bot, update)
			case "‚óÄÔ∏è–ù–∞–∑–∞–¥":
				commandimpl.Back(userMap, bot.Bot, update)
			default:
				commandimpl.Undefined(userMap, bot.Bot, update)
			}
		case domain.Location_AcceptDelivery:
			switch update.Message.Text {
			case "–û–ø–ª–∞—Ç–∏—Ç—å –∑–∞–∫–∞–∑":
				commandimpl.PayHoodie(userMap, bot.Bot, update, cfg.BotConfig)
			case "‚óÄÔ∏è–ù–∞–∑–∞–¥":
				commandimpl.Back(userMap, bot.Bot, update)
			default:
				commandimpl.Undefined(userMap, bot.Bot, update)

			}
		default:
			switch update.Message.Text {
			case "/start":
				commandimpl.Start(userMap, bot.Bot, update, dbu)
				// TODO: add user in dbu

			}
		}
	}
}
