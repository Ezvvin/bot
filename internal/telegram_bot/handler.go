package telegrambot

import (
	db_domain "bot/internal/database/domain"
	db_usecase "bot/internal/database/usecase"
	"bot/internal/domain"
	commandimpl "bot/internal/telegram_bot/command_impl"
	"fmt"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	log "github.com/sirupsen/logrus"
)

func (bot *Telegrambot) InitHandler(cfg domain.Config, dbu *db_usecase.DataBaseUsecase) {

	log.Debug("Init bot handler")
	updates := bot.Bot.GetUpdatesChan(bot.UpdateCfg)
	// –°–æ–∑–¥–∞–µ–º –º–∞–ø—É –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ª–æ–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	userMap := map[int64]domain.Location{}
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
	for update := range updates {
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –ø—É—Å—Ç–æ–µ
		if update.Message == nil {
			continue
		}
		u := db_domain.User{Id: int(update.Message.From.ID)}
		// –ø—Ä–æ–≤–µ—Ä—è–µ–º, –∏–º–µ–µ—Ç –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç –ª–æ–∫–∞—Ü–∏–∏
		if userMap[update.Message.From.ID] == domain.Location_SendAdress {
			if update.Message.Location != nil {
				for i, user := range dbu.Users {
					if user.Id == u.Id {
						user.Adress = db_domain.Adress{Latitude: update.Message.Location.Latitude, Longitude: update.Message.Location.Longitude}
						dbu.Users[i] = user
					}
				}
			}
			commandimpl.AcceptDelivery(userMap, bot.Bot, update, cfg, dbu)
			continue
		}
		// –ø—Ä–æ–≤–µ—Ä—è–µ–º , –∏–º–µ–µ—Ç –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç –∫–æ–Ω—Ç–∞–∫—Ç–∞
		if update.Message.Contact != nil {
			// –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –Ω–æ–º–µ—Ä –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –¥–æ—Å—Ç–∞–≤–∫–∏ –∫—É—Ä—å–µ—Ä–æ–º
			if userMap[update.Message.From.ID] == domain.Location_SendContact {
				if update.Message.Contact.PhoneNumber != "" {
					for i, user := range dbu.Users {
						if user.Id == u.Id {
							user.Phone = update.Message.Contact.PhoneNumber
							dbu.Users[i] = user
						}
					}
				}
				commandimpl.SendLocation(userMap, bot.Bot, update, dbu)
				continue
			}
			// –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –Ω–æ–º–µ—Ä –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –¥–æ—Å—Ç–∞–≤–∫–∏ —Å–∞–º–æ–≤—ã–≤–æ–∑–æ–º
			if userMap[update.Message.From.ID] == domain.Location_DeliveryPoint {
				if update.Message.Contact.PhoneNumber != "" {
					for i, user := range dbu.Users {
						if user.Id == u.Id {
							user.Phone = update.Message.Contact.PhoneNumber
							dbu.Users[i] = user
						}
					}
				}
				commandimpl.AcceptDelivery(userMap, bot.Bot, update, cfg, dbu)
				continue
			}
		}
		// –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å , –∂–¥–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		if userMap[update.Message.From.ID] == domain.Location_Support {
			msgSupport := tgbotapi.NewMessage(cfg.AdminChat, fmt.Sprintf(("ID: %d\n–ö–ª–∏–µ–Ω—Ç: %s\n–í–æ–ø—Ä–æ—Å: %s\n"), update.Message.From.ID, (fmt.Sprintf("<a href='tg://user?id=%v'>%s</a>", update.Message.From.ID, update.Message.From.FirstName)), update.Message.Text))
			if _, err := bot.Bot.Send(msgSupport); err != nil {
				log.WithError(err).Errorf(domain.ErrCommand_Init.Error(), "supportmsg")
			}
			msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –Ω–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä!")
			msg.ReplyMarkup = domain.MainMenuKeyboard
			if _, err := bot.Bot.Send(msg); err != nil {
				log.WithError(err).Errorf(domain.ErrCommand_Init.Error(), "msgforusersupport")
			}
			userMap[update.Message.From.ID] = domain.Location_MainMenu
			continue

		}
		// –∫–æ–º–∞–Ω–¥—ã

		switch userMap[update.Message.From.ID] {

		case domain.Location_MainMenu:
			switch update.Message.Text {
			case "–ö–∞—Ç–∞–ª–æ–≥ –æ–¥–µ–∂–¥—ãü•º":
				commandimpl.Catalog(userMap, bot.Bot, update)

			case "–û—Ç–∑—ã–≤—ãüî•":
				commandimpl.Commends(userMap, bot.Bot, update)

			case "–ü–æ–¥–¥–µ—Ä–∂–∫–∞":
				commandimpl.Support(userMap, bot.Bot, update)

			case "–ú–∞–≥–∞–∑–∏–Ω L√öQ":
				commandimpl.Contacts(bot.Bot, update)

			case "–ö–æ—Ä–∑–∏–Ω–∞":
				commandimpl.CartMenu(userMap, bot.Bot, update, cfg, dbu)

			default:
				commandimpl.Undefined(userMap, bot.Bot, update)

			}
		case domain.Location_CartMenu:
			switch update.Message.Text {

			case "–°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑":
				commandimpl.Delivery(userMap, bot.Bot, update)

			case "–ö–∞—Ç–∞–ª–æ–≥ –æ–¥–µ–∂–¥—ãü•º":
				commandimpl.Catalog(userMap, bot.Bot, update)

			case "‚óÄÔ∏è–ù–∞–∑–∞–¥":
				commandimpl.Back(userMap, bot.Bot, update)

			default:
				commandimpl.Undefined(userMap, bot.Bot, update)

			}
		case domain.Location_HoodyCatalogMenu:
			switch update.Message.Text {

			case "üñ§Black Hoodieüñ§":
				commandimpl.BlackHoodieCommand(userMap, bot.Bot, update, dbu)

			case "ü§çWhite Hoodieü§ç":
				commandimpl.WhiteHoodieCommand(userMap, bot.Bot, update)

			case "‚óÄÔ∏è–ù–∞–∑–∞–¥":
				commandimpl.Back(userMap, bot.Bot, update)

			default:
				commandimpl.Undefined(userMap, bot.Bot, update)
			}
		case domain.Location_WhiteHoodieMenu:
			switch update.Message.Text {

			case "–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É":
				commandimpl.SizeHoodie(userMap, bot.Bot, update)

			case "‚óÄÔ∏è–ù–∞–∑–∞–¥":
				commandimpl.Back(userMap, bot.Bot, update)

			case "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
				commandimpl.BackToMenu(userMap, bot.Bot, update)

			default:
				commandimpl.Undefined(userMap, bot.Bot, update)
			}
		case domain.Location_BlackHoodieMenu:
			switch update.Message.Text {

			case "–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É":
				commandimpl.SizeHoodie(userMap, bot.Bot, update)

			case "‚óÄÔ∏è–ù–∞–∑–∞–¥":
				commandimpl.Back(userMap, bot.Bot, update)

			case "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
				commandimpl.BackToMenu(userMap, bot.Bot, update)

			default:
				commandimpl.Undefined(userMap, bot.Bot, update)
			}
		case domain.Location_BlackSizeHoodie:
			switch update.Message.Text {

			case "S-46 (EUR)", "M-48 (EUR)", "L-50 (EUR)", "XL-52 (EUR)":
				commandimpl.NewOrder(userMap, bot.Bot, update, dbu, update.Message.Text)

			case "‚óÄÔ∏è–ù–∞–∑–∞–¥":
				commandimpl.Back(userMap, bot.Bot, update)

			case "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
				commandimpl.BackToMenu(userMap, bot.Bot, update)

			default:
				commandimpl.Undefined(userMap, bot.Bot, update)
			}
		case domain.Location_WhiteSizeHoodie:
			switch update.Message.Text {

			case "S-46 (EUR)", "M-48 (EUR)", "L-50 (EUR)", "XL-52 (EUR)":
				commandimpl.NewOrder(userMap, bot.Bot, update, dbu, update.Message.Text)

			case "‚óÄÔ∏è–ù–∞–∑–∞–¥":
				commandimpl.Back(userMap, bot.Bot, update)

			case "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
				commandimpl.BackToMenu(userMap, bot.Bot, update)

			default:
				commandimpl.Undefined(userMap, bot.Bot, update)
			}
		case domain.Location_AddProduct:
			switch update.Message.Text {
			case "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
				commandimpl.BackToMenu(userMap, bot.Bot, update)
			case "–ö–æ—Ä–∑–∏–Ω–∞":
				commandimpl.CartMenu(userMap, bot.Bot, update, cfg, dbu)

			}
		case domain.Location_Delivery:
			switch update.Message.Text {

			case "–°–∞–º–æ–≤—ã–≤–æ–∑":
				commandimpl.DeliveryPoint(userMap, bot.Bot, update, dbu)

			case "–î–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –∞–¥—Ä–µ—Å—É":
				commandimpl.DeliveryCourier(userMap, bot.Bot, update, dbu)

			case "‚óÄÔ∏è–ù–∞–∑–∞–¥":
				commandimpl.Back(userMap, bot.Bot, update)

			case "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
				commandimpl.BackToMenu(userMap, bot.Bot, update)

			default:
				commandimpl.Undefined(userMap, bot.Bot, update)
			}
		case domain.Location_SendContact:
			switch update.Message.Text {

			case "‚óÄÔ∏è–ù–∞–∑–∞–¥":
				commandimpl.Back(userMap, bot.Bot, update)

			case "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
				commandimpl.BackToMenu(userMap, bot.Bot, update)

			case "–í—ã–±–µ—Ä–µ—Ç–µ —Å–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏":
				commandimpl.Delivery(userMap, bot.Bot, update)

			default:
				commandimpl.Undefined(userMap, bot.Bot, update)
			}
		case domain.Location_DeliveryPoint:
			switch update.Message.Text {

			case "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑":
				commandimpl.AcceptDelivery(userMap, bot.Bot, update, cfg, dbu)

			case "‚óÄÔ∏è–ù–∞–∑–∞–¥":
				commandimpl.Back(userMap, bot.Bot, update)

			case "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
				commandimpl.BackToMenu(userMap, bot.Bot, update)

			default:
				commandimpl.Undefined(userMap, bot.Bot, update)
			}
		case domain.Location_AcceptDelivery:
			switch update.Message.Text {

			case "–û–ø–ª–∞—Ç–∏—Ç—å –∑–∞–∫–∞–∑":
				commandimpl.PayHoodie(userMap, bot.Bot, update, cfg.BotConfig)

			case "‚óÄÔ∏è–ù–∞–∑–∞–¥":
				commandimpl.Back(userMap, bot.Bot, update)

			case "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
				commandimpl.BackToMenu(userMap, bot.Bot, update)

			default:
				commandimpl.Undefined(userMap, bot.Bot, update)
			}
		default:
			userMap[update.Message.From.ID] = domain.Location_StartMenu
			switch update.Message.Text {

			case "/start":
				commandimpl.Start(userMap, bot.Bot, update, dbu)
			default:
				commandimpl.Undefined(userMap, bot.Bot, update)
			}
		}
	}
}
